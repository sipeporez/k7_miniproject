package com.subway.persistence;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.subway.domain.Board;
import com.subway.domain.BoardDTO;

public interface BoardRepository extends JpaRepository<Board, Integer> {

	@Query(value = "SELECT b.idx, b.title, b.content, b.create_Date, m.nickname, b.station_no FROM Board b JOIN Member m ON b.userid = m.userid WHERE b.station_no = :station_no", nativeQuery = true)
	Page<BoardDTO> getBoards(Pageable pageable, @Param("station_no") int station_no);

	@Query(value = "SELECT b.idx, b.title, b.content, b.create_Date, m.nickname FROM Board b JOIN Member m ON b.userid = m.userid WHERE m.nickname = :nickname", nativeQuery = true)
	Page<BoardDTO> getBoardsByNickname(Pageable pageable, @Param("nickname") String nickname);

	@Query(value = "SELECT b.idx, b.title, b.content, b.create_Date, m.nickname FROM Board b JOIN Member m ON b.userid = m.userid WHERE MATCH(title) AGAINST(:title IN NATURAL LANGUAGE MODE)", nativeQuery = true)
	Page<BoardDTO> getBoardsByTitle(Pageable pageable, @Param("title") String title);

	@Query(value = "SELECT b.idx, b.title, b.content, b.create_Date, m.nickname FROM Board b JOIN Member m ON b.userid = m.userid WHERE MATCH(content) AGAINST(:content IN NATURAL LANGUAGE MODE)", nativeQuery = true)
	Page<BoardDTO> getBoardsByContent(Pageable pageable, @Param("content") String content);
	
	@Modifying
	@Query(value = "DELETE FROM Board b WHERE b.idx=:idx AND b.userid = :userid", nativeQuery = true)
	int deleteBoardByUserID(@Param("userid") String userid, @Param("idx") int idx);
}
