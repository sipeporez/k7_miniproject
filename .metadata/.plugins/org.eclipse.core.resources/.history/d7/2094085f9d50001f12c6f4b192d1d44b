package com.subway.persistence;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.subway.domain.Board;
import com.subway.domain.BoardDTO;

public interface BoardRepository extends JpaRepository<Board, Integer> {

	@Query("SELECT b.idx, b.title, b.nickname, b.content, b.createDate FROM Board b")
	Page<Board> getBoards(Pageable pageable);

	@Query("SELECT b.idx, b.title, b.nickname, b.content, b.createDate FROM Board b WHERE b.nickname = :nickname")
	Page<Board> getBoardsByNickname(Pageable pageable, @Param("nickname") String nickname);

	@Query("SELECT b.idx, b.title, b.nickname, b.content, b.createDate FROM Board b WHERE b.nickname = :title")
	Page<Board> getBoardsByTitle(Pageable pageable, @Param("title") String title);

	@Query("SELECT b.idx, b.title, b.nickname, b.content, b.createDate FROM Board b WHERE b.nickname = :content")
	Page<Board> getBoardsByContent(Pageable pageable, @Param("content") String content);

	@Query(value = "SELECT b.idx, b.title, b.nickname, b.content, b.create_Date "
			+ "FROM Board b WHERE MATCH(title, content) AGAINST(:searchKeyword IN NATURAL LANGUAGE MODE)", nativeQuery = true)
	Page<Object[]> getBoardsByKeyword(Pageable pageable, @Param("searchKeyword") String searchKeyword);

	List<Object[]> findBoardsByKeywordNative(@Param("searchKeyword") String searchKeyword, @Param("limit") int limit,
			@Param("offset") int offset);

	@Query(value = "SELECT COUNT(*) FROM Board b WHERE MATCH(title, content) AGAINST(:searchKeyword)", nativeQuery = true)
	long countBoardsByKeywordNative(@Param("searchKeyword") String searchKeyword);

	default Page<BoardDTO> findBoardsByKeyword(String searchKeyword, Pageable pageable) {
		List<Object[]> results = findBoardsByKeywordNative(searchKeyword, pageable.getPageSize(), pageable.getOffset());

		List<BoardDTO> boardDTOs = results.stream()
				.map(result -> new BoardDTO(((Number) result[0]).longValue(), (String) result[1], (String) result[2],
						(String) result[3], ((java.sql.Timestamp) result[4]).toLocalDateTime()))
				.collect(Collectors.toList());

		long total = countBoardsByKeywordNative(searchKeyword);

		return new PageImpl<>(boardDTOs, pageable, total);
	}
}
